/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { PostMetaService } from "../postMeta.service";
import { PostMetaCreateInput } from "./PostMetaCreateInput";
import { PostMeta } from "./PostMeta";
import { PostMetaFindManyArgs } from "./PostMetaFindManyArgs";
import { PostMetaWhereUniqueInput } from "./PostMetaWhereUniqueInput";
import { PostMetaUpdateInput } from "./PostMetaUpdateInput";

export class PostMetaControllerBase {
  constructor(protected readonly service: PostMetaService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: PostMeta })
  async createPostMeta(
    @common.Body() data: PostMetaCreateInput
  ): Promise<PostMeta> {
    return await this.service.createPostMeta({
      data: data,
      select: {
        createdAt: true,
        id: true,
        metaData: true,
        postId: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [PostMeta] })
  @ApiNestedQuery(PostMetaFindManyArgs)
  async postMetas(@common.Req() request: Request): Promise<PostMeta[]> {
    const args = plainToClass(PostMetaFindManyArgs, request.query);
    return this.service.postMetas({
      ...args,
      select: {
        createdAt: true,
        id: true,
        metaData: true,
        postId: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: PostMeta })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async postMeta(
    @common.Param() params: PostMetaWhereUniqueInput
  ): Promise<PostMeta | null> {
    const result = await this.service.postMeta({
      where: params,
      select: {
        createdAt: true,
        id: true,
        metaData: true,
        postId: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: PostMeta })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updatePostMeta(
    @common.Param() params: PostMetaWhereUniqueInput,
    @common.Body() data: PostMetaUpdateInput
  ): Promise<PostMeta | null> {
    try {
      return await this.service.updatePostMeta({
        where: params,
        data: data,
        select: {
          createdAt: true,
          id: true,
          metaData: true,
          postId: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: PostMeta })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deletePostMeta(
    @common.Param() params: PostMetaWhereUniqueInput
  ): Promise<PostMeta | null> {
    try {
      return await this.service.deletePostMeta({
        where: params,
        select: {
          createdAt: true,
          id: true,
          metaData: true,
          postId: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
