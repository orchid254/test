/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { PostMeta } from "./PostMeta";
import { PostMetaCountArgs } from "./PostMetaCountArgs";
import { PostMetaFindManyArgs } from "./PostMetaFindManyArgs";
import { PostMetaFindUniqueArgs } from "./PostMetaFindUniqueArgs";
import { CreatePostMetaArgs } from "./CreatePostMetaArgs";
import { UpdatePostMetaArgs } from "./UpdatePostMetaArgs";
import { DeletePostMetaArgs } from "./DeletePostMetaArgs";
import { PostMetaService } from "../postMeta.service";
@graphql.Resolver(() => PostMeta)
export class PostMetaResolverBase {
  constructor(protected readonly service: PostMetaService) {}

  async _postMetasMeta(
    @graphql.Args() args: PostMetaCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [PostMeta])
  async postMetas(
    @graphql.Args() args: PostMetaFindManyArgs
  ): Promise<PostMeta[]> {
    return this.service.postMetas(args);
  }

  @graphql.Query(() => PostMeta, { nullable: true })
  async postMeta(
    @graphql.Args() args: PostMetaFindUniqueArgs
  ): Promise<PostMeta | null> {
    const result = await this.service.postMeta(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => PostMeta)
  async createPostMeta(
    @graphql.Args() args: CreatePostMetaArgs
  ): Promise<PostMeta> {
    return await this.service.createPostMeta({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => PostMeta)
  async updatePostMeta(
    @graphql.Args() args: UpdatePostMetaArgs
  ): Promise<PostMeta | null> {
    try {
      return await this.service.updatePostMeta({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => PostMeta)
  async deletePostMeta(
    @graphql.Args() args: DeletePostMetaArgs
  ): Promise<PostMeta | null> {
    try {
      return await this.service.deletePostMeta(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
